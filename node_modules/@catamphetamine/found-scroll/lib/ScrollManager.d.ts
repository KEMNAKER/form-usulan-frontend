import React from 'react';
import ScrollBehavior, { ScrollTarget } from 'scroll-behavior';
declare type Location = any;
declare type RenderArgs = any;
declare type Router = any;
declare type HttpError = any;
export interface LocationBase {
    action: 'PUSH' | string;
    hash?: string;
}
export declare type ScrollPosition = [scrollLeft: number, scrollTop: number];
export interface CreateScrollBehaviorConfig {
    addNavigationListener: (listener: () => any) => () => void;
    stateStorage: {
        save: (location: Location, key: string | null, value: ScrollPosition) => void;
        read: (location: Location, key: string | null) => ScrollPosition | null | undefined;
    };
    getCurrentLocation: () => Location;
    shouldUpdateScroll: (this: ScrollBehavior<Location, ScrollManagerRenderArgs>, prevContext: ScrollManagerRenderArgs | null, context: ScrollManagerRenderArgs) => ScrollTarget;
}
export interface ScrollManagerRenderArgs {
    location: Location;
    router: Router;
    elements?: React.ReactNode[];
    error?: HttpError;
}
export interface ScrollManagerProps {
    shouldUpdateScroll?: (this: ScrollBehavior<Location, ScrollManagerRenderArgs>, prevContext: ScrollManagerRenderArgs | null, context: ScrollManagerRenderArgs) => ScrollTarget;
    createScrollBehavior?: (config: CreateScrollBehaviorConfig) => ScrollBehavior<Location, ScrollManagerRenderArgs>;
    renderArgs: ScrollManagerRenderArgs;
    children?: React.ReactNode;
}
export interface ScrollContextValue {
    scrollBehavior: ScrollBehavior<Location, ScrollManagerRenderArgs>;
    registerScrollElement: (key: string, element: HTMLElement) => () => void;
}
export declare const ScrollContext: React.Context<ScrollContextValue | null>;
declare class ScrollManager extends React.Component<ScrollManagerProps> {
    prevRenderArgs: ScrollManagerRenderArgs | null;
    readonly scrollBehavior: ScrollBehavior<Location, ScrollManagerRenderArgs>;
    private readonly scrollContext;
    constructor(props: ScrollManagerProps);
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    maybeUpdateScroll(): void;
    shouldUpdateScroll: (prevRenderArgs: RenderArgs, renderArgs: RenderArgs) => ScrollTarget;
    registerScrollElement: (key: string, element: HTMLElement) => () => void;
    render(): JSX.Element;
}
export default ScrollManager;
