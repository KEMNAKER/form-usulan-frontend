import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["store", "historyProtocol", "historyMiddlewares", "historyOptions", "routeConfig", "getFound"];
import useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';
import FarceActions from 'farce/Actions';
import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';
import createBaseRouter from './createBaseRouter';
import createFarceStore from './createFarceStore';
import { jsx as _jsx } from "react/jsx-runtime";
export default function createFarceRouter(_ref) {
  let {
    store: userStore,
    historyProtocol,
    historyMiddlewares,
    historyOptions,
    routeConfig,
    getFound = ({
      found
    }) => found
  } = _ref,
      options = _objectWithoutPropertiesLoose(_ref, _excluded);

  const Router = createBaseRouter(options);
  const store = userStore || createFarceStore({
    historyProtocol,
    historyMiddlewares,
    historyOptions,
    routeConfig
  });
  const FarceRouter = /*#__PURE__*/forwardRef((props, ref) => {
    const [state, setState] = useState(() => {
      const {
        match,
        resolvedMatch
      } = getFound(store.getState());
      return {
        match,
        resolvedMatch
      };
    });
    useIsomorphicEffect(() => {
      return store.subscribe(() => {
        setState(prev => {
          const {
            match,
            resolvedMatch
          } = getFound(store.getState());

          if ((prev == null ? void 0 : prev.match) === match && prev.resolvedMatch === resolvedMatch) {
            return prev;
          }

          return {
            match,
            resolvedMatch
          };
        });
      });
    }, []);
    useEffect(() => {
      return () => {
        // eslint-disable-next-line react-hooks/exhaustive-deps
        store.dispatch(FarceActions.dispose());
      };
    }, []);
    useImperativeHandle(ref, () => store, []);
    return /*#__PURE__*/_jsx(Router, Object.assign({}, props, state, {
      store: store
    }));
  });
  FarceRouter.displayName = 'FarceRouter';
  return FarceRouter;
}