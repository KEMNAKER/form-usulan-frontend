"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = RouteProvider;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _getRoutePath = _interopRequireDefault(require("./getRoutePath.js"));
var _RouteContext = _interopRequireDefault(require("./RouteContext.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function RouteProvider(_ref) {
  var location = _ref.location,
    routes = _ref.routes,
    params = _ref.params,
    children = _ref.children;
  var getRoute = function getRoute() {
    return {
      location: location,
      params: params,
      path: (0, _getRoutePath["default"])(routes)
    };
  };
  var initialRoute = (0, _react.useMemo)(function () {
    return getRoute();
  }, []);
  var currentRoute = (0, _react.useRef)(initialRoute);

  // `location` is `undefined` when router starts loading the next page.
  // In that case, the previous page is still rendered, so `currentRoute`
  // shouldn't change.
  if (location) {
    if (location !== currentRoute.current) {
      currentRoute.current = getRoute();
    }
  }
  return _react["default"].createElement(_RouteContext["default"].Provider, {
    value: currentRoute.current
  }, children);
}
var routeShape = {
  // A `route` doesn't always have a `path` property:
  // `found` router allows that when nesting routes.
  // Example: `{ Component: Wrapper, children: { path: '/', Component: Home } }`.
  path: _propTypes["default"].string
};
routeShape.children = _propTypes["default"].arrayOf(_propTypes["default"].shape(routeShape));
var routeType = _propTypes["default"].shape(routeShape);
RouteProvider.propTypes = {
  location: _propTypes["default"].shape({
    pathname: _propTypes["default"].string.isRequired,
    query: _propTypes["default"].objectOf(_propTypes["default"].string).isRequired,
    search: _propTypes["default"].string.isRequired,
    hash: _propTypes["default"].string.isRequired,
    // Miscellaneous (not used).

    // Some kind of a possibly-likely-unique key. Is empty for the initial page.
    key: _propTypes["default"].string,
    // History entry state. Can be empty.
    state: _propTypes["default"].any,
    // Index in browser history stack.
    index: _propTypes["default"].number.isRequired,
    // The "delta" in terms of `index` change as a result of the navigation.
    // For example, a regular hyperlink click is `delta: 1`.
    // A "Back" action is `delta: -1`. A user could go several pages "Back".
    delta: _propTypes["default"].number,
    // 'PUSH' or 'REPLACE' if the location was reached via history "push" or
    // "replace" action respectively. 'POP' on the initial location, or if
    // the location was reached via the browser "Back" or "Forward" buttons
    // or via `FarceActions.go`.
    action: _propTypes["default"].oneOf(['PUSH', 'REPLACE', 'POP']).isRequired
  }),
  routes: _propTypes["default"].arrayOf(routeType),
  params: _propTypes["default"].objectOf(_propTypes["default"].string),
  children: _propTypes["default"].node
};
//# sourceMappingURL=RouteProvider.js.map