{"version":3,"file":"getLocationUrl.js","names":["getLocationUrl","location","options","origin","Error","pathname","search","hash","basename"],"sources":["../lib/getLocationUrl.js"],"sourcesContent":["export default function getLocationUrl(location, options = {}) {\r\n\t// There's no `location.origin` property because all locations are relative.\r\n\t// https://github.com/4Catalyzer/farce#locations-and-location-descriptors\r\n\tif (location.origin) {\r\n\t\tthrow new Error('[react-pages] A `location` can\\'t contain an `origin` property: all locations must be relative')\r\n\t}\r\n\r\n\t// `location` argument within this library is always a `farce` location.\r\n\t//\r\n\t// A `farce` location always has a `search: string` property.\r\n\t// https://github.com/4Catalyzer/farce#locations-and-location-descriptors\r\n\t//\r\n\t// Because `queryMiddleware` is applied, it will also contain a `query: object`\r\n\t// which is gonna be a parsed `search` string.\r\n\t// So those two could be used interchangeably.\r\n\t//\r\n\tconst pathname = location.pathname\r\n\tconst search = location.search || ''\r\n\tconst hash = location.hash || ''\r\n\r\n\t// Append `basename` to relative URLs.\r\n\tconst basename = options.basename || ''\r\n\r\n\treturn `${basename}${pathname}${search}${hash}`\r\n}\r\n"],"mappings":";;;;;;AAAe,SAASA,cAAc,CAACC,QAAQ,EAAgB;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EAC5D;EACA;EACA,IAAID,QAAQ,CAACE,MAAM,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,gGAAgG,CAAC;EAClH;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAMC,QAAQ,GAAGJ,QAAQ,CAACI,QAAQ;EAClC,IAAMC,MAAM,GAAGL,QAAQ,CAACK,MAAM,IAAI,EAAE;EACpC,IAAMC,IAAI,GAAGN,QAAQ,CAACM,IAAI,IAAI,EAAE;;EAEhC;EACA,IAAMC,QAAQ,GAAGN,OAAO,CAACM,QAAQ,IAAI,EAAE;EAEvC,iBAAUA,QAAQ,SAAGH,QAAQ,SAAGC,MAAM,SAAGC,IAAI;AAC9C"}